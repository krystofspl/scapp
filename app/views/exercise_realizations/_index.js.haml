:javascript
  var exercises = $("#exercises");
  var settings = $("#settings");
  function showSettingsPane(){
    exercises.hide();
    settings.fadeIn(1000);
  }
  function showExercisesPane(){
    settings.hide();
    exercises.fadeIn(1000);
  }
  function switchExercisesSettingsPanesVisibility(){
    if(exercises.css("display")!='none'){
      showSettingsPane();
    } else if(settings.css("display")!='none'){
      showExercisesPane();
    }
  }
  function makeElementsSameHeight(selector){
    // Get title box with max height
    var maxHeight = Math.max.apply(null, $(selector).map(function ()
      {return $(this).innerHeight();}).get());
    // Set all heights accordingly
    $(selector).css('min-height', maxHeight);
  }
  function getPlanIdForRealization(realizationId){
    var realization = $('.realization[data-realization-id='+realizationId+']');
    return realization.parent().data('plan-id');
  }
  function refreshRealizationsInPlan(plan){
    $('ul[data-plan-id='+plan+'] > .realization').each(function(){
      var realization = $(this);
      $.ajax({
        url : '#{url_for :controller => "exercise_realizations", :action => "show_short"}',
        data: { "realization_id": realization.data('realization-id') },
        type: 'GET',
        async: false,
        success: function(data){
            realization.html(data);
        }
      });
    });
  }

  // DOCUMENT READY
  $(function() {
    // CSS
    // tohle nevimproc rozbiji drag+sort
    //makeElementsSameHeight(".player-plan-wrapper .title");
    //makeElementsSameHeight("#exercises-wrapper li");
    $("ul, li").disableSelection();

    // CAROUSEL INIT
    var owl = $('.owl-carousel');
    owl.owlCarousel({
        items: 3,
        margin: 10
    });

    // CAROUSEL PREV, NEXT BUTTONS
    $('.owl-carousel-next').click(function() {owl.trigger('next.owl.carousel');});
    $('.owl-carousel-prev').click(function() {owl.trigger('prev.owl.carousel');});

    // SCROLLABLE LEFT PANE
    $(window).scroll(function() {
      $('#left-pane > .box').css('top', $(this).scrollTop() + "px");
    });

    // SORTABLE
    $('.player-plan').sortable({
        axis: 'y',
        opacity: 0.9,
        start: function(event, ui) {
          ui.item.addClass('sortable-active');
        },

        // SORT: An item has been sorted within the plan
        stop: function(event, ui) {
          ui.item.removeClass('sortable-active draggable-helper');
          var realization_id = ui.item.data('realization-id'), position = ui.item.index();
          $.ajax({
              type: 'POST',
              url: '#{url_for :controller => "exercise_realizations", :action => "update_row_order"}',
              dataType: 'json',
              data: { exercise_realization: {id: realization_id, order_position: position } }
          });
          var plan = $(this).data('plan-id');
          refreshRealizationsInPlan(plan);
        },

        // CREATE: A draggable item has been received from exercises list (exc has been added)
        receive: function(event, ui){
          var code = ui.item.data('exercise-code'), version = ui.item.data('exercise-version');
          var droppedItem = $(this).data().uiSortable.currentItem;
          var position = droppedItem.index();
          var plan = $(this).data('plan-id');
          $.ajax({
              type: 'POST',
              url: '#{url_for :controller => "exercise_realizations", :action => "create"}',
              dataType: 'json',
              async: false,
              data: { exercise_realization: {exercise_code: code, exercise_version: version, order_position: position, plan_id: plan } },
              success: function(e) {
                // Add data attributes
                droppedItem.data('realization-id', e.id); // updates the data object
                droppedItem.attr('data-realization-id', e.id); // updates the attribute
                // Change styles
                droppedItem.removeClass().removeAttr('style');
                droppedItem.addClass('realization ui-sortable-handle');
              },
              error: function(e) {
                  alert('An error has occured, could not add the realization.');
              }
          })
        }
    });
  });