:javascript
  // PANES VISIBILITY
  var exercises = $("#exercises"), settings = $("#settings");
  function showSettingsPane(){
    exercises.hide();
    settings.fadeIn(1000);
  }
  function showExercisesPane(){
    settings.hide();
    exercises.fadeIn(1000);
  }
  function switchExercisesSettingsPanesVisibility(){
    if(exercises.css("display")!='none'){
      showSettingsPane();
    } else if(settings.css("display")!='none'){
      showExercisesPane();
    }
  }

  // GET AND REFRESH ELEMENTS
  // Refresh/initialize Exercises draggable
  function refreshExercisesDraggable(){
    $('.draggable').draggable({
      appendTo: '#owl-carousel',
      forceHelperSize: true,
      connectToSortable: $('.player-plan'),
      opacity: 0.8,
      cursorAt: { left: 5 , top: 20},
      helper: 'clone',
      start: function(e, ui){
        var helper = ui.helper;
        helper.removeClass('col-sm-12');
        helper.addClass('draggable-helper');
      }
    });
  }
  function getPlanIdForRealization(realizationId){
    var realization = $('.realization[data-realization-id='+realizationId+']');
    return realization.parent().data('plan-id');
  }
  // Refreshes whole plan with all realizations with current data
  function refreshRealizationsInPlan(plan){
    var plan = $('ul[data-plan-id='+plan+']');
    var planParent = plan.parent();
    planParent.fadeTo('fast',0.5);
    planParent.find('.loading-spinner').show();
    $.ajax({
      url : '#{url_for :controller => "exercise_realizations", :action => "list_exercise_realizations"}',
      data: { plan_id : plan.data('plan-id') },
      type: 'GET',
      success: function(data){
        // Replace ExerciseRealization html with updated plan
        planParent.html(data).fadeTo('fast',1.0);
        planParent.find('.loading-spinner').hide();
        // Exercises .draggable needs to get refreshed,
        // otherwise it doesn't recognize changed .player-plan sortables
        refreshExercisesDraggable();
      }
    });
  }


  // TWEAKS
  // Prevent enter keypress in forms (it triggers html request by default)
  function preventFormEnterKeypress(selector){
    $(selector).on("keypress", function (e) {
      if (e.keyCode == 13) {
        return false;
      }
    });
  }

  function formErrorHandler(){
    return function(evt,xhr,status,error){
      var $form = $(this), errors, errorText;
      try {
        errors = $.parseJSON(xhr.responseText);
      } catch (err) {
        // If the responseText is not valid JSON (like if a 500 exception was thrown), populate errors with a generic error message.
        errors = {message: "#{t('exercise_realizations.form.please_reload_try_again')}"};
      }
      // Build an unordered list from the list of errors
      errorText = "#{t('dictionary.following_errors_occured_text_only')}<ul>";
      for (error in errors) {
        errorText += "<li>" + errors[error] + "</li> ";
      }
      errorText += "</ul>";
      // Insert error list into form
      $form.find('div.form-errors').html(errorText);
    }
  }

  function alertErrorHandler(msg, droppedItem){
    return function(xhr,status,error){
      var $form = $(this), errors, errorText;
      try {
        errors = $.parseJSON(xhr.responseText);
      } catch (err) {
        // If the responseText is not valid JSON (like if a 500 exception was thrown), populate errors with a generic error message.
        errors = {message: "#{t('exercise_realizations.form.please_reload_try_again')}"};
      }
      // Build an unordered list from the list of errors
      errorText = "\n#{t('dictionary.following_errors_occured_text_only')}";
      for (error in errors) {
        errorText += "\n" + errors[error] + "";
      }
      // Insert error list into form
      alert(msg+' '+errorText);
      droppedItem.fadeOut(1000, function(){$(this).remove();});
    }
  }

  // FAVORITE PLANS button trigger - load tab contents
  $('#favorite-plans-tab').unbind().click(function(){
    $('#favorite-plans').html('');
    $.get('#{url_for :controller => "favorite_plans", :action => "index"}');
  });

  // DOCUMENT READY
  $(function() {
    // CSS
    // (why?) this breaks drag+drop, probably css issue
    //makeElementsSameHeight(".player-plan-wrapper .title");
    //makeElementsSameHeight("#exercises-wrapper li");

    $("ul, li").disableSelection();

    // CAROUSEL INIT
    var owl = $('.owl-carousel');
    owl.owlCarousel({
      margin: 5,
      //onTranslated: owlCarouselCallback, -> need to fire this on initialization as well
      responsive: {
        0: {items: 1}, 900: {items: 2}, 1200: {items: 3}, 1600: {items: 4}
      }
    });
    // Set before+after plan counts for carousel arrows
    // Currently disabled, because onInitialization doesnt provide "page" event,
    // which is needed, so it only works when a page has been changed now
    function owlCarouselCallback(event){
      var prevText = $('.owl-carousel-before span');
      var nextText = $('.owl-carousel-after span');
      if(event.page.index>0){
        prevText.html(event.page.index);
      } else {
        prevText.html('');
      }
      if(event.page.count-event.page.index-1>0){
        nextText.html(event.page.count-event.page.index-1);
      } else {
        nextText.html('');
      }
    }

    // CAROUSEL PREV, NEXT BUTTONS
    $('.owl-carousel-prev').click(function() {owl.trigger('prev.owl.carousel');});
    $('.owl-carousel-next').click(function() {owl.trigger('next.owl.carousel');});

    // SCROLLABLE LEFT PANE
    $(window).scroll(function() {
      var offset = $("#right-pane").offset().top, scrollTop = $(this).scrollTop();
      if(scrollTop>offset){
        $('#left-pane > .box').css('top', scrollTop-offset+10 + 'px');
      } else if(scrollTop<=offset){
        $('#left-pane > .box').css('top', '0');
      }
    });

    // PREVENT ENTER KEYPRESS ON LOADED FORMS
    preventFormEnterKeypress('form');
  });